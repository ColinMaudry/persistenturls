# 
#    Copyright(c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix purl:<http://persistent.name/rdf/2010/purl#>.

purl:register rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:UserTemplate];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.InputStream>];
	http:operation "register";
	http:type "text/html";
	obj:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	obj:groovy """
		def profile = findCopyProfile()
		if (profile == null)
			throw new InternalServerError("Missing Copy Profile")
		return profile.constructAsHTML('copy', null, this)
	""".

purl:post-register rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom purl:UserTemplate];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	http:method "POST";
	http:operation "register";
	http:expect "201-created";
	obj:imports </data/group/public>;
	obj:groovy """
		def user = copyDescription('copy', msg.in, findCopyNamespaces())
		copy.calliMaintainers.addAll(calliMaintainers)
		_public.calliMembers.add(user)
		return user
	""".

purl:post-register-in a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain purl:post-register;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml";
	obj:name "in".