# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.

calli:authorize-request rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:AuthorizationRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	http:type "text/uri-list";
	http:operation "authorize-request";
	obj:name "authorizeRequest";
	obj:grooy """
		def user = msg.functionalLiteralResponse
		if (user == null)
			return null
		String qs = null
		Map<String, String> map = msg.request
		String target = map.get("request-target")[0]
		int idx = target.indexOf('?')
		if (idx > 0) {
			qs = target.substring(idx + 1)
		}
		if (authorizeUser(user, msg.getSubject(), qs))
			return user
		return null
	""".

calli:authorize-request-arg1 a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain calli:authorize-request;
	rdfs:range xsd:string;
	http:parameter "method".

calli:authorize-request-arg2 a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain calli:authorize-request;
	http:type "text/uri-list";
	http:parameter "resource";
	obj:name "subject".

calli:authorize-request-arg3 a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain calli:authorize-request;
	rdfs:range <java:java.util.Map>;
	obj:name "request".

calli:authorize-user rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:AuthorizationRealm];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:boolean];
	obj:name "authorizeUser".

calli:authorize-user-arg1 a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain calli:authorize-user;
	obj:name "credential".

calli:authorize-user-arg2 a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain calli:authorize-user;
	obj:name "subject".

calli:authorize-user-arg3 a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain calli:authorize-user;
	rdfs:range xsd:string;
	obj:name "qs".

calli:authorize-self owl:equivalentClass calli:authorize-user;
	obj:groovy "return msg.subject == msg.credential".

calli:authorize-maintainer owl:equivalentClass calli:authorize-user;
	obj:sparql """
		ASK {
			{
				$subject calli:reviewer $credential
				FILTER ($qs = "view" || $qs = "pre-view" || !bound($qs))
			} UNION {
				$subject calli:curator $credential
				FILTER ($qs = "copy" || $qs = "pre-copy")
			} UNION {
				$subject calli:maintainer $credential
			}
		}
	""".

calli:authorize-member owl:equivalentClass calli:authorize-user;
	obj:sparql """
		ASK {
			?group calli:member $credential .
			{
				$subject calli:reviewer ?group
				FILTER ($qs = "view" || $qs = "pre-view" || !bound($qs))
			} UNION {
				$subject calli:curator ?group
				FILTER ($qs = "copy" || $qs = "pre-copy")
			} UNION {
				$subject calli:maintainer ?group
			}
		}
	""".

