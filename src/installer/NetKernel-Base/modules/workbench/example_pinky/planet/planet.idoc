<idoc>
  <seq>
	<comment>
	*********************
	Planet Pinky: A feed aggregator in 5 operations
	-----------------------------------------------
	This example uses a dynamically generated code pattern to create and perform the
	feed Union.  The feeds.xml is a declarative specification
	for the aggregation.  The total feed will inherit cacheability according the
	HTTP time-to-live of the individual feeds.  Therefore the aggregated feed
	will be cached and this script will run automatically to rebuild the aggregate
	feed as each individual feed expires.
	*********************
	</comment>
	<instr>
		<type>xslt</type>
		<operand>feeds.xml</operand>
		<operator>
			<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
				<xsl:output method="xml"/>
				<xsl:template match="/feeds">
					<idoc>
						<seq>
							<instr>
								<type>feedUnion</type>
								<xsl:for-each select="feed">
									<xsl:variable name="i" select="position()"/>
									<xsl:element name="feed{$i}">active:httpGet+url@<xsl:value-of select="url"/></xsl:element>
								</xsl:for-each>
								<target>this:response</target>
							</instr>
						</seq>
					</idoc>
				</xsl:template>
			</xsl:stylesheet>
    	</operator>
		<target>this:response</target>
	</instr>
	<instr>
      <type>dpml</type>
	  <operand>this:response</operand>
	  <target>this:response</target>
    </instr>
	<instr>
		<type>feedSort</type>
		<feed>this:response</feed>
		<operator>feeds.xml#xpointer(/feeds/sort)</operator>
		<target>this:response</target>
	</instr>
	<instr>
		<type>feedTruncate</type>
		<feed>this:response</feed>
		<operator>feeds.xml#xpointer(/feeds/number)</operator>
		<target>this:response</target>
	</instr>
	<instr>
      <type>feedSetFeedInfo</type>
	  <feed>this:response</feed>
	  <operator>feeds.xml#xpointer(/feeds/info)</operator>
	  <target>this:response</target>
    </instr>
  </seq>
</idoc>